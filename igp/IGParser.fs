// Implementation file for parser generated by fsyacc
module IGParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "IGParser.fsy"


  

# 11 "IGParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | F_LP
  | M_LP
  | P_LP
  | P_LC
  | E_LP
  | E_LC
  | I_LP
  | D_LP
  | Bind_LP
  | Bind_LC
  | Bdir_LP
  | Bdir_LC
  | Cex_LP
  | Cex_LC
  | Cac_LP
  | Cac_LC
  | A_LP
  | A_LC
  | DESCRIPTOR of (string)
  | WS of (string)
  | AND
  | OR
  | XOR
  | NOT
  | SEP
  | LP
  | RP
  | LB
  | RB
  | LC
  | RC
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_F_LP
    | TOKEN_M_LP
    | TOKEN_P_LP
    | TOKEN_P_LC
    | TOKEN_E_LP
    | TOKEN_E_LC
    | TOKEN_I_LP
    | TOKEN_D_LP
    | TOKEN_Bind_LP
    | TOKEN_Bind_LC
    | TOKEN_Bdir_LP
    | TOKEN_Bdir_LC
    | TOKEN_Cex_LP
    | TOKEN_Cex_LC
    | TOKEN_Cac_LP
    | TOKEN_Cac_LC
    | TOKEN_A_LP
    | TOKEN_A_LC
    | TOKEN_DESCRIPTOR
    | TOKEN_WS
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_XOR
    | TOKEN_NOT
    | TOKEN_SEP
    | TOKEN_LP
    | TOKEN_RP
    | TOKEN_LB
    | TOKEN_RB
    | TOKEN_LC
    | TOKEN_RC
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_descriptor
    | NONTERM_signeddescriptor
    | NONTERM_nestedstatement
    | NONTERM_simpledescriptors
    | NONTERM_complexdescriptors
    | NONTERM_contextcategory
    | NONTERM_actconditiontype
    | NONTERM_actconditiontypes
    | NONTERM_conditions
    | NONTERM_execconstrainttype
    | NONTERM_execconstrainttypes
    | NONTERM_constraints
    | NONTERM_context
    | NONTERM_attributes
    | NONTERM_directobjects
    | NONTERM_objectdir
    | NONTERM_indirectobjects
    | NONTERM_objectind
    | NONTERM_object
    | NONTERM_deontic
    | NONTERM_aim
    | NONTERM_entity
    | NONTERM_propertycombos
    | NONTERM_properties
    | NONTERM_modal
    | NONTERM_function
    | NONTERM_aic
    | NONTERM_abdic
    | NONTERM_fec
    | NONTERM_pmfec
    | NONTERM_complexstatement
    | NONTERM_statement
    | NONTERM_and_or_xor
    | NONTERM_optional_not
    | NONTERM_c_a_f
    | NONTERM_optional_bracketed_c_a_f

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | F_LP  -> 1 
  | M_LP  -> 2 
  | P_LP  -> 3 
  | P_LC  -> 4 
  | E_LP  -> 5 
  | E_LC  -> 6 
  | I_LP  -> 7 
  | D_LP  -> 8 
  | Bind_LP  -> 9 
  | Bind_LC  -> 10 
  | Bdir_LP  -> 11 
  | Bdir_LC  -> 12 
  | Cex_LP  -> 13 
  | Cex_LC  -> 14 
  | Cac_LP  -> 15 
  | Cac_LC  -> 16 
  | A_LP  -> 17 
  | A_LC  -> 18 
  | DESCRIPTOR _ -> 19 
  | WS _ -> 20 
  | AND  -> 21 
  | OR  -> 22 
  | XOR  -> 23 
  | NOT  -> 24 
  | SEP  -> 25 
  | LP  -> 26 
  | RP  -> 27 
  | LB  -> 28 
  | RB  -> 29 
  | LC  -> 30 
  | RC  -> 31 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_F_LP 
  | 2 -> TOKEN_M_LP 
  | 3 -> TOKEN_P_LP 
  | 4 -> TOKEN_P_LC 
  | 5 -> TOKEN_E_LP 
  | 6 -> TOKEN_E_LC 
  | 7 -> TOKEN_I_LP 
  | 8 -> TOKEN_D_LP 
  | 9 -> TOKEN_Bind_LP 
  | 10 -> TOKEN_Bind_LC 
  | 11 -> TOKEN_Bdir_LP 
  | 12 -> TOKEN_Bdir_LC 
  | 13 -> TOKEN_Cex_LP 
  | 14 -> TOKEN_Cex_LC 
  | 15 -> TOKEN_Cac_LP 
  | 16 -> TOKEN_Cac_LC 
  | 17 -> TOKEN_A_LP 
  | 18 -> TOKEN_A_LC 
  | 19 -> TOKEN_DESCRIPTOR 
  | 20 -> TOKEN_WS 
  | 21 -> TOKEN_AND 
  | 22 -> TOKEN_OR 
  | 23 -> TOKEN_XOR 
  | 24 -> TOKEN_NOT 
  | 25 -> TOKEN_SEP 
  | 26 -> TOKEN_LP 
  | 27 -> TOKEN_RP 
  | 28 -> TOKEN_LB 
  | 29 -> TOKEN_RB 
  | 30 -> TOKEN_LC 
  | 31 -> TOKEN_RC 
  | 34 -> TOKEN_end_of_input
  | 32 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_descriptor 
    | 3 -> NONTERM_signeddescriptor 
    | 4 -> NONTERM_signeddescriptor 
    | 5 -> NONTERM_nestedstatement 
    | 6 -> NONTERM_simpledescriptors 
    | 7 -> NONTERM_simpledescriptors 
    | 8 -> NONTERM_complexdescriptors 
    | 9 -> NONTERM_complexdescriptors 
    | 10 -> NONTERM_complexdescriptors 
    | 11 -> NONTERM_contextcategory 
    | 12 -> NONTERM_actconditiontype 
    | 13 -> NONTERM_actconditiontypes 
    | 14 -> NONTERM_actconditiontypes 
    | 15 -> NONTERM_conditions 
    | 16 -> NONTERM_conditions 
    | 17 -> NONTERM_conditions 
    | 18 -> NONTERM_execconstrainttype 
    | 19 -> NONTERM_execconstrainttypes 
    | 20 -> NONTERM_execconstrainttypes 
    | 21 -> NONTERM_execconstrainttypes 
    | 22 -> NONTERM_constraints 
    | 23 -> NONTERM_constraints 
    | 24 -> NONTERM_constraints 
    | 25 -> NONTERM_context 
    | 26 -> NONTERM_attributes 
    | 27 -> NONTERM_attributes 
    | 28 -> NONTERM_directobjects 
    | 29 -> NONTERM_objectdir 
    | 30 -> NONTERM_objectdir 
    | 31 -> NONTERM_indirectobjects 
    | 32 -> NONTERM_objectind 
    | 33 -> NONTERM_objectind 
    | 34 -> NONTERM_object 
    | 35 -> NONTERM_object 
    | 36 -> NONTERM_object 
    | 37 -> NONTERM_deontic 
    | 38 -> NONTERM_aim 
    | 39 -> NONTERM_entity 
    | 40 -> NONTERM_entity 
    | 41 -> NONTERM_propertycombos 
    | 42 -> NONTERM_properties 
    | 43 -> NONTERM_properties 
    | 44 -> NONTERM_modal 
    | 45 -> NONTERM_function 
    | 46 -> NONTERM_aic 
    | 47 -> NONTERM_abdic 
    | 48 -> NONTERM_abdic 
    | 49 -> NONTERM_abdic 
    | 50 -> NONTERM_fec 
    | 51 -> NONTERM_pmfec 
    | 52 -> NONTERM_pmfec 
    | 53 -> NONTERM_pmfec 
    | 54 -> NONTERM_complexstatement 
    | 55 -> NONTERM_complexstatement 
    | 56 -> NONTERM_complexstatement 
    | 57 -> NONTERM_complexstatement 
    | 58 -> NONTERM_complexstatement 
    | 59 -> NONTERM_statement 
    | 60 -> NONTERM_statement 
    | 61 -> NONTERM_statement 
    | 62 -> NONTERM_and_or_xor 
    | 63 -> NONTERM_and_or_xor 
    | 64 -> NONTERM_and_or_xor 
    | 65 -> NONTERM_optional_not 
    | 66 -> NONTERM_optional_not 
    | 67 -> NONTERM_c_a_f 
    | 68 -> NONTERM_c_a_f 
    | 69 -> NONTERM_c_a_f 
    | 70 -> NONTERM_optional_bracketed_c_a_f 
    | 71 -> NONTERM_optional_bracketed_c_a_f 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 34 
let _fsyacc_tagOfErrorTerminal = 32

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | F_LP  -> "F_LP" 
  | M_LP  -> "M_LP" 
  | P_LP  -> "P_LP" 
  | P_LC  -> "P_LC" 
  | E_LP  -> "E_LP" 
  | E_LC  -> "E_LC" 
  | I_LP  -> "I_LP" 
  | D_LP  -> "D_LP" 
  | Bind_LP  -> "Bind_LP" 
  | Bind_LC  -> "Bind_LC" 
  | Bdir_LP  -> "Bdir_LP" 
  | Bdir_LC  -> "Bdir_LC" 
  | Cex_LP  -> "Cex_LP" 
  | Cex_LC  -> "Cex_LC" 
  | Cac_LP  -> "Cac_LP" 
  | Cac_LC  -> "Cac_LC" 
  | A_LP  -> "A_LP" 
  | A_LC  -> "A_LC" 
  | DESCRIPTOR _ -> "DESCRIPTOR" 
  | WS _ -> "WS" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | XOR  -> "XOR" 
  | NOT  -> "NOT" 
  | SEP  -> "SEP" 
  | LP  -> "LP" 
  | RP  -> "RP" 
  | LB  -> "LB" 
  | RB  -> "RB" 
  | LC  -> "LC" 
  | RC  -> "RC" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | F_LP  -> (null : System.Object) 
  | M_LP  -> (null : System.Object) 
  | P_LP  -> (null : System.Object) 
  | P_LC  -> (null : System.Object) 
  | E_LP  -> (null : System.Object) 
  | E_LC  -> (null : System.Object) 
  | I_LP  -> (null : System.Object) 
  | D_LP  -> (null : System.Object) 
  | Bind_LP  -> (null : System.Object) 
  | Bind_LC  -> (null : System.Object) 
  | Bdir_LP  -> (null : System.Object) 
  | Bdir_LC  -> (null : System.Object) 
  | Cex_LP  -> (null : System.Object) 
  | Cex_LC  -> (null : System.Object) 
  | Cac_LP  -> (null : System.Object) 
  | Cac_LC  -> (null : System.Object) 
  | A_LP  -> (null : System.Object) 
  | A_LC  -> (null : System.Object) 
  | DESCRIPTOR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | WS _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | XOR  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | SEP  -> (null : System.Object) 
  | LP  -> (null : System.Object) 
  | RP  -> (null : System.Object) 
  | LB  -> (null : System.Object) 
  | RB  -> (null : System.Object) 
  | LC  -> (null : System.Object) 
  | RC  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 12us; 65535us; 5us; 6us; 12us; 13us; 29us; 27us; 56us; 27us; 95us; 91us; 98us; 91us; 108us; 104us; 111us; 104us; 121us; 122us; 137us; 91us; 140us; 133us; 146us; 147us; 10us; 65535us; 20us; 18us; 24us; 18us; 32us; 18us; 35us; 18us; 59us; 55us; 62us; 55us; 85us; 18us; 124us; 18us; 127us; 18us; 149us; 18us; 9us; 65535us; 46us; 47us; 52us; 53us; 73us; 74us; 79us; 80us; 88us; 89us; 101us; 102us; 114us; 115us; 130us; 131us; 143us; 144us; 8us; 65535us; 20us; 21us; 24us; 25us; 32us; 28us; 35us; 28us; 85us; 86us; 124us; 125us; 127us; 128us; 149us; 150us; 0us; 65535us; 2us; 65535us; 29us; 30us; 56us; 57us; 2us; 65535us; 32us; 33us; 35us; 36us; 2us; 65535us; 40us; 41us; 43us; 44us; 8us; 65535us; 153us; 82us; 157us; 82us; 160us; 82us; 163us; 82us; 166us; 82us; 170us; 82us; 174us; 82us; 178us; 82us; 2us; 65535us; 59us; 60us; 62us; 63us; 2us; 65535us; 67us; 68us; 70us; 71us; 1us; 65535us; 83us; 84us; 8us; 65535us; 153us; 154us; 157us; 158us; 160us; 161us; 163us; 164us; 166us; 167us; 170us; 171us; 174us; 175us; 178us; 179us; 7us; 65535us; 0us; 152us; 15us; 152us; 182us; 155us; 185us; 152us; 192us; 152us; 196us; 152us; 211us; 152us; 3us; 65535us; 95us; 96us; 98us; 99us; 137us; 138us; 2us; 65535us; 152us; 117us; 155us; 117us; 2us; 65535us; 108us; 109us; 111us; 112us; 3us; 65535us; 119us; 120us; 152us; 118us; 155us; 118us; 2us; 65535us; 152us; 156us; 155us; 156us; 3us; 65535us; 152us; 159us; 155us; 159us; 156us; 162us; 4us; 65535us; 152us; 153us; 156us; 157us; 159us; 160us; 162us; 163us; 4us; 65535us; 165us; 166us; 169us; 170us; 173us; 174us; 177us; 178us; 1us; 65535us; 140us; 141us; 7us; 65535us; 0us; 168us; 15us; 168us; 182us; 168us; 185us; 168us; 192us; 168us; 196us; 168us; 211us; 168us; 8us; 65535us; 0us; 172us; 15us; 172us; 168us; 176us; 182us; 172us; 185us; 172us; 192us; 172us; 196us; 172us; 211us; 172us; 9us; 65535us; 0us; 165us; 15us; 165us; 168us; 169us; 172us; 173us; 176us; 177us; 185us; 165us; 192us; 165us; 196us; 165us; 211us; 165us; 6us; 65535us; 0us; 200us; 15us; 200us; 185us; 209us; 192us; 209us; 196us; 209us; 211us; 209us; 7us; 65535us; 0us; 180us; 15us; 180us; 182us; 180us; 185us; 180us; 192us; 180us; 196us; 180us; 211us; 180us; 6us; 65535us; 0us; 201us; 15us; 201us; 185us; 210us; 192us; 210us; 196us; 210us; 211us; 210us; 7us; 65535us; 0us; 181us; 15us; 181us; 182us; 181us; 185us; 181us; 192us; 181us; 196us; 181us; 211us; 181us; 7us; 65535us; 0us; 202us; 15us; 202us; 182us; 189us; 185us; 208us; 192us; 208us; 196us; 208us; 211us; 208us; 2us; 65535us; 0us; 2us; 15us; 16us; 9us; 65535us; 22us; 23us; 37us; 38us; 49us; 50us; 64us; 65us; 76us; 77us; 92us; 93us; 105us; 106us; 134us; 135us; 194us; 195us; 16us; 65535us; 20us; 19us; 24us; 19us; 32us; 19us; 34us; 35us; 35us; 19us; 39us; 40us; 40us; 32us; 43us; 32us; 61us; 62us; 66us; 67us; 67us; 59us; 70us; 59us; 85us; 19us; 124us; 19us; 127us; 19us; 149us; 19us; 4us; 65535us; 185us; 186us; 192us; 193us; 196us; 197us; 211us; 212us; 1us; 65535us; 189us; 190us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 16us; 27us; 37us; 46us; 47us; 50us; 53us; 56us; 65us; 68us; 71us; 73us; 82us; 90us; 94us; 97us; 100us; 104us; 107us; 111us; 116us; 121us; 123us; 131us; 140us; 150us; 157us; 165us; 172us; 180us; 188us; 191us; 201us; 218us; 223us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 3us; 1us; 3us; 1us; 4us; 2us; 4us; 66us; 1us; 4us; 2us; 4us; 66us; 1us; 4us; 1us; 4us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 13us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 14us; 1us; 14us; 2us; 15us; 17us; 2us; 15us; 17us; 2us; 15us; 17us; 1us; 16us; 1us; 16us; 1us; 16us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 17us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 18us; 1us; 20us; 1us; 20us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 21us; 1us; 21us; 2us; 22us; 24us; 2us; 22us; 24us; 2us; 22us; 24us; 1us; 23us; 1us; 23us; 1us; 23us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 24us; 1us; 25us; 1us; 25us; 1us; 25us; 1us; 26us; 1us; 26us; 1us; 26us; 1us; 27us; 1us; 27us; 1us; 27us; 1us; 28us; 1us; 28us; 1us; 28us; 1us; 28us; 1us; 28us; 1us; 28us; 1us; 28us; 1us; 29us; 1us; 29us; 1us; 29us; 1us; 30us; 1us; 30us; 1us; 30us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 31us; 1us; 32us; 1us; 32us; 1us; 32us; 1us; 33us; 1us; 33us; 1us; 33us; 2us; 34us; 36us; 1us; 35us; 1us; 36us; 1us; 36us; 1us; 37us; 1us; 37us; 1us; 37us; 1us; 38us; 1us; 38us; 1us; 38us; 1us; 39us; 1us; 39us; 1us; 39us; 1us; 40us; 1us; 40us; 1us; 40us; 1us; 41us; 1us; 41us; 1us; 41us; 1us; 41us; 1us; 41us; 1us; 41us; 1us; 41us; 1us; 42us; 1us; 42us; 1us; 42us; 1us; 43us; 1us; 43us; 1us; 43us; 1us; 44us; 1us; 44us; 1us; 44us; 1us; 45us; 1us; 45us; 1us; 45us; 4us; 46us; 47us; 48us; 49us; 1us; 46us; 1us; 46us; 3us; 47us; 48us; 49us; 2us; 47us; 49us; 1us; 47us; 1us; 47us; 1us; 48us; 1us; 48us; 1us; 48us; 1us; 49us; 1us; 49us; 1us; 49us; 1us; 50us; 1us; 50us; 1us; 50us; 2us; 51us; 53us; 1us; 51us; 1us; 51us; 1us; 51us; 1us; 52us; 1us; 52us; 1us; 52us; 1us; 52us; 1us; 53us; 1us; 53us; 1us; 53us; 1us; 53us; 1us; 54us; 1us; 55us; 3us; 56us; 57us; 58us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 56us; 1us; 57us; 1us; 57us; 1us; 57us; 1us; 58us; 1us; 58us; 1us; 58us; 1us; 58us; 1us; 58us; 1us; 58us; 1us; 58us; 1us; 58us; 1us; 59us; 1us; 60us; 1us; 61us; 1us; 62us; 1us; 63us; 1us; 64us; 1us; 66us; 1us; 66us; 1us; 67us; 1us; 68us; 1us; 69us; 1us; 71us; 1us; 71us; 1us; 71us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; 21us; 23us; 26us; 28us; 30us; 32us; 34us; 36us; 38us; 40us; 42us; 44us; 46us; 48us; 50us; 52us; 54us; 56us; 58us; 60us; 62us; 64us; 66us; 68us; 70us; 72us; 74us; 76us; 78us; 80us; 82us; 84us; 86us; 88us; 91us; 94us; 97us; 99us; 101us; 103us; 105us; 107us; 109us; 111us; 113us; 115us; 117us; 119us; 121us; 123us; 125us; 127us; 129us; 131us; 133us; 135us; 137us; 139us; 141us; 143us; 145us; 148us; 151us; 154us; 156us; 158us; 160us; 162us; 164us; 166us; 168us; 170us; 172us; 174us; 176us; 178us; 180us; 182us; 184us; 186us; 188us; 190us; 192us; 194us; 196us; 198us; 200us; 202us; 204us; 206us; 208us; 210us; 212us; 214us; 216us; 218us; 220us; 222us; 224us; 226us; 228us; 230us; 232us; 234us; 236us; 238us; 240us; 242us; 245us; 247us; 249us; 251us; 253us; 255us; 257us; 259us; 261us; 263us; 265us; 267us; 269us; 271us; 273us; 275us; 277us; 279us; 281us; 283us; 285us; 287us; 289us; 291us; 293us; 295us; 297us; 299us; 301us; 303us; 305us; 307us; 309us; 311us; 313us; 318us; 320us; 322us; 326us; 329us; 331us; 333us; 335us; 337us; 339us; 341us; 343us; 345us; 347us; 349us; 351us; 354us; 356us; 358us; 360us; 362us; 364us; 366us; 368us; 370us; 372us; 374us; 376us; 378us; 380us; 384us; 386us; 388us; 390us; 392us; 394us; 396us; 398us; 400us; 402us; 404us; 406us; 408us; 410us; 412us; 414us; 416us; 418us; 420us; 422us; 424us; 426us; 428us; 430us; 432us; 434us; 436us; 438us; 440us; 442us; 444us; |]
let _fsyacc_action_rows = 214
let _fsyacc_actionTableElements = [|7us; 32768us; 1us; 149us; 2us; 146us; 3us; 140us; 4us; 143us; 17us; 85us; 18us; 88us; 28us; 182us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 0us; 16386us; 1us; 32768us; 19us; 4us; 1us; 32768us; 27us; 7us; 0us; 16387us; 1us; 32768us; 20us; 10us; 1us; 32768us; 20us; 11us; 1us; 32768us; 26us; 12us; 1us; 16450us; 26us; 12us; 1us; 32768us; 19us; 4us; 1us; 32768us; 27us; 14us; 0us; 16388us; 7us; 32768us; 1us; 149us; 2us; 146us; 3us; 140us; 4us; 143us; 17us; 85us; 18us; 88us; 28us; 182us; 1us; 32768us; 27us; 17us; 0us; 16389us; 0us; 16390us; 1us; 32768us; 26us; 20us; 2us; 16449us; 24us; 9us; 26us; 5us; 1us; 32768us; 20us; 22us; 3us; 32768us; 21us; 203us; 22us; 204us; 23us; 205us; 1us; 32768us; 20us; 24us; 2us; 16449us; 24us; 9us; 26us; 5us; 1us; 32768us; 27us; 26us; 0us; 16391us; 0us; 16395us; 1us; 32768us; 26us; 29us; 1us; 32768us; 19us; 4us; 1us; 32768us; 27us; 31us; 0us; 16396us; 2us; 16449us; 24us; 9us; 26us; 5us; 0us; 16397us; 1us; 16449us; 24us; 206us; 2us; 16449us; 24us; 9us; 26us; 5us; 1us; 32768us; 20us; 37us; 3us; 32768us; 21us; 203us; 22us; 204us; 23us; 205us; 1us; 32768us; 20us; 39us; 1us; 16449us; 24us; 206us; 2us; 16449us; 24us; 206us; 26us; 34us; 1us; 32768us; 27us; 42us; 0us; 16398us; 2us; 16449us; 24us; 206us; 26us; 34us; 1us; 32768us; 27us; 45us; 1us; 16399us; 20us; 49us; 1us; 32768us; 26us; 15us; 1us; 32768us; 31us; 48us; 0us; 16400us; 3us; 32768us; 21us; 203us; 22us; 204us; 23us; 205us; 1us; 32768us; 20us; 51us; 1us; 32768us; 16us; 52us; 1us; 32768us; 26us; 15us; 1us; 32768us; 31us; 54us; 0us; 16401us; 1us; 32768us; 26us; 56us; 1us; 32768us; 19us; 4us; 1us; 32768us; 27us; 58us; 0us; 16402us; 2us; 32768us; 24us; 8us; 26us; 5us; 0us; 16404us; 1us; 16449us; 24us; 206us; 2us; 32768us; 24us; 8us; 26us; 5us; 1us; 32768us; 20us; 64us; 3us; 32768us; 21us; 203us; 22us; 204us; 23us; 205us; 1us; 32768us; 20us; 66us; 1us; 16449us; 24us; 206us; 2us; 16403us; 24us; 206us; 26us; 61us; 1us; 32768us; 27us; 69us; 0us; 16405us; 2us; 16403us; 24us; 206us; 26us; 61us; 1us; 32768us; 27us; 72us; 1us; 16406us; 20us; 76us; 1us; 32768us; 26us; 15us; 1us; 32768us; 31us; 75us; 0us; 16407us; 3us; 32768us; 21us; 203us; 22us; 204us; 23us; 205us; 1us; 32768us; 20us; 78us; 1us; 32768us; 14us; 79us; 1us; 32768us; 26us; 15us; 1us; 32768us; 31us; 81us; 0us; 16408us; 1us; 32768us; 20us; 83us; 2us; 32768us; 13us; 70us; 14us; 73us; 0us; 16409us; 2us; 16449us; 24us; 9us; 26us; 5us; 1us; 32768us; 27us; 87us; 0us; 16410us; 1us; 32768us; 26us; 15us; 1us; 32768us; 31us; 90us; 0us; 16411us; 1us; 32768us; 20us; 92us; 3us; 32768us; 21us; 203us; 22us; 204us; 23us; 205us; 1us; 32768us; 20us; 94us; 1us; 32768us; 26us; 95us; 1us; 32768us; 19us; 4us; 1us; 32768us; 27us; 97us; 0us; 16412us; 1us; 32768us; 19us; 4us; 1us; 32768us; 27us; 100us; 0us; 16413us; 1us; 32768us; 26us; 15us; 1us; 32768us; 31us; 103us; 0us; 16414us; 1us; 32768us; 20us; 105us; 3us; 32768us; 21us; 203us; 22us; 204us; 23us; 205us; 1us; 32768us; 20us; 107us; 1us; 32768us; 26us; 108us; 1us; 32768us; 19us; 4us; 1us; 32768us; 27us; 110us; 0us; 16415us; 1us; 32768us; 19us; 4us; 1us; 32768us; 27us; 113us; 0us; 16416us; 1us; 32768us; 26us; 15us; 1us; 32768us; 31us; 116us; 0us; 16417us; 1us; 16418us; 20us; 119us; 0us; 16419us; 2us; 32768us; 9us; 111us; 10us; 114us; 0us; 16420us; 1us; 32768us; 19us; 4us; 1us; 32768us; 27us; 123us; 0us; 16421us; 2us; 16449us; 24us; 9us; 26us; 5us; 1us; 32768us; 27us; 126us; 0us; 16422us; 2us; 16449us; 24us; 9us; 26us; 5us; 1us; 32768us; 27us; 129us; 0us; 16423us; 1us; 32768us; 26us; 15us; 1us; 32768us; 31us; 132us; 0us; 16424us; 1us; 32768us; 20us; 134us; 3us; 32768us; 21us; 203us; 22us; 204us; 23us; 205us; 1us; 32768us; 20us; 136us; 1us; 32768us; 26us; 137us; 1us; 32768us; 19us; 4us; 1us; 32768us; 27us; 139us; 0us; 16425us; 1us; 32768us; 19us; 4us; 1us; 32768us; 27us; 142us; 0us; 16426us; 1us; 32768us; 26us; 15us; 1us; 32768us; 31us; 145us; 0us; 16427us; 1us; 32768us; 19us; 4us; 1us; 32768us; 27us; 148us; 0us; 16428us; 2us; 16449us; 24us; 9us; 26us; 5us; 1us; 32768us; 27us; 151us; 0us; 16429us; 6us; 32768us; 7us; 124us; 8us; 121us; 9us; 111us; 10us; 114us; 11us; 98us; 12us; 101us; 2us; 32768us; 15us; 43us; 16us; 46us; 0us; 16430us; 5us; 32768us; 8us; 121us; 9us; 111us; 10us; 114us; 11us; 98us; 12us; 101us; 2us; 32768us; 7us; 124us; 8us; 121us; 2us; 32768us; 15us; 43us; 16us; 46us; 0us; 16431us; 1us; 32768us; 7us; 124us; 2us; 32768us; 15us; 43us; 16us; 46us; 0us; 16432us; 1us; 32768us; 7us; 124us; 2us; 32768us; 15us; 43us; 16us; 46us; 0us; 16433us; 2us; 32768us; 5us; 127us; 6us; 130us; 2us; 32768us; 15us; 43us; 16us; 46us; 0us; 16434us; 2us; 32768us; 1us; 149us; 2us; 146us; 2us; 32768us; 5us; 127us; 6us; 130us; 2us; 32768us; 15us; 43us; 16us; 46us; 0us; 16435us; 1us; 32768us; 1us; 149us; 2us; 32768us; 5us; 127us; 6us; 130us; 2us; 32768us; 15us; 43us; 16us; 46us; 0us; 16436us; 1us; 32768us; 1us; 149us; 2us; 32768us; 5us; 127us; 6us; 130us; 2us; 32768us; 15us; 43us; 16us; 46us; 0us; 16437us; 0us; 16438us; 0us; 16439us; 8us; 32768us; 2us; 146us; 3us; 140us; 4us; 143us; 17us; 85us; 18us; 88us; 24us; 183us; 26us; 192us; 28us; 182us; 1us; 32768us; 20us; 184us; 1us; 32768us; 26us; 185us; 7us; 32768us; 1us; 149us; 2us; 146us; 3us; 140us; 4us; 143us; 17us; 85us; 18us; 88us; 28us; 182us; 1us; 32768us; 27us; 187us; 1us; 32768us; 29us; 188us; 0us; 16440us; 1us; 16454us; 28us; 211us; 1us; 32768us; 29us; 191us; 0us; 16441us; 7us; 32768us; 1us; 149us; 2us; 146us; 3us; 140us; 4us; 143us; 17us; 85us; 18us; 88us; 28us; 182us; 1us; 32768us; 20us; 194us; 3us; 32768us; 21us; 203us; 22us; 204us; 23us; 205us; 1us; 32768us; 20us; 196us; 7us; 32768us; 1us; 149us; 2us; 146us; 3us; 140us; 4us; 143us; 17us; 85us; 18us; 88us; 28us; 182us; 1us; 32768us; 27us; 198us; 1us; 32768us; 29us; 199us; 0us; 16442us; 0us; 16443us; 0us; 16444us; 0us; 16445us; 0us; 16446us; 0us; 16447us; 0us; 16448us; 1us; 32768us; 20us; 207us; 0us; 16450us; 0us; 16451us; 0us; 16452us; 0us; 16453us; 7us; 32768us; 1us; 149us; 2us; 146us; 3us; 140us; 4us; 143us; 17us; 85us; 18us; 88us; 28us; 182us; 1us; 32768us; 29us; 213us; 0us; 16455us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 8us; 9us; 11us; 12us; 13us; 15us; 17us; 18us; 20us; 22us; 24us; 26us; 28us; 30us; 31us; 39us; 41us; 42us; 43us; 45us; 48us; 50us; 54us; 56us; 59us; 61us; 62us; 63us; 65us; 67us; 69us; 70us; 73us; 74us; 76us; 79us; 81us; 85us; 87us; 89us; 92us; 94us; 95us; 98us; 100us; 102us; 104us; 106us; 107us; 111us; 113us; 115us; 117us; 119us; 120us; 122us; 124us; 126us; 127us; 130us; 131us; 133us; 136us; 138us; 142us; 144us; 146us; 149us; 151us; 152us; 155us; 157us; 159us; 161us; 163us; 164us; 168us; 170us; 172us; 174us; 176us; 177us; 179us; 182us; 183us; 186us; 188us; 189us; 191us; 193us; 194us; 196us; 200us; 202us; 204us; 206us; 208us; 209us; 211us; 213us; 214us; 216us; 218us; 219us; 221us; 225us; 227us; 229us; 231us; 233us; 234us; 236us; 238us; 239us; 241us; 243us; 244us; 246us; 247us; 250us; 251us; 253us; 255us; 256us; 259us; 261us; 262us; 265us; 267us; 268us; 270us; 272us; 273us; 275us; 279us; 281us; 283us; 285us; 287us; 288us; 290us; 292us; 293us; 295us; 297us; 298us; 300us; 302us; 303us; 306us; 308us; 309us; 316us; 319us; 320us; 326us; 329us; 332us; 333us; 335us; 338us; 339us; 341us; 344us; 345us; 348us; 351us; 352us; 355us; 358us; 361us; 362us; 364us; 367us; 370us; 371us; 373us; 376us; 379us; 380us; 381us; 382us; 391us; 393us; 395us; 403us; 405us; 407us; 408us; 410us; 412us; 413us; 421us; 423us; 427us; 429us; 437us; 439us; 441us; 442us; 443us; 444us; 445us; 446us; 447us; 448us; 450us; 451us; 452us; 453us; 454us; 462us; 464us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 3us; 5us; 3us; 1us; 8us; 1us; 1us; 8us; 1us; 4us; 2us; 9us; 3us; 3us; 9us; 4us; 0us; 2us; 9us; 3us; 3us; 9us; 3us; 3us; 3us; 7us; 3us; 3us; 7us; 3us; 3us; 1us; 1us; 3us; 3us; 3us; 3us; 3us; 7us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 5us; 3us; 4us; 4us; 5us; 1us; 1us; 7us; 4us; 9us; 1us; 1us; 1us; 1us; 1us; 1us; 0us; 2us; 1us; 1us; 1us; 0us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 5us; 5us; 6us; 6us; 6us; 7us; 8us; 9us; 9us; 10us; 10us; 10us; 11us; 12us; 12us; 12us; 13us; 13us; 13us; 14us; 15us; 15us; 16us; 17us; 17us; 18us; 19us; 19us; 20us; 20us; 20us; 21us; 22us; 23us; 23us; 24us; 25us; 25us; 26us; 27us; 28us; 29us; 29us; 29us; 30us; 31us; 31us; 31us; 32us; 32us; 32us; 32us; 32us; 33us; 33us; 33us; 34us; 34us; 34us; 35us; 35us; 36us; 36us; 36us; 37us; 37us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 16386us; 65535us; 65535us; 16387us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16388us; 65535us; 65535us; 16389us; 16390us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16391us; 16395us; 65535us; 65535us; 65535us; 16396us; 65535us; 16397us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16398us; 65535us; 65535us; 65535us; 65535us; 65535us; 16400us; 65535us; 65535us; 65535us; 65535us; 65535us; 16401us; 65535us; 65535us; 65535us; 16402us; 65535us; 16404us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16405us; 65535us; 65535us; 65535us; 65535us; 65535us; 16407us; 65535us; 65535us; 65535us; 65535us; 65535us; 16408us; 65535us; 65535us; 16409us; 65535us; 65535us; 16410us; 65535us; 65535us; 16411us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16412us; 65535us; 65535us; 16413us; 65535us; 65535us; 16414us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16415us; 65535us; 65535us; 16416us; 65535us; 65535us; 16417us; 65535us; 16419us; 65535us; 16420us; 65535us; 65535us; 16421us; 65535us; 65535us; 16422us; 65535us; 65535us; 16423us; 65535us; 65535us; 16424us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16425us; 65535us; 65535us; 16426us; 65535us; 65535us; 16427us; 65535us; 65535us; 16428us; 65535us; 65535us; 16429us; 65535us; 65535us; 16430us; 65535us; 65535us; 65535us; 16431us; 65535us; 65535us; 16432us; 65535us; 65535us; 16433us; 65535us; 65535us; 16434us; 65535us; 65535us; 65535us; 16435us; 65535us; 65535us; 65535us; 16436us; 65535us; 65535us; 65535us; 16437us; 16438us; 16439us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16440us; 65535us; 65535us; 16441us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16442us; 16443us; 16444us; 16445us; 16446us; 16447us; 16448us; 65535us; 16450us; 16451us; 16452us; 16453us; 65535us; 65535us; 16455us; |]
let _fsyacc_reductions ()  =    [| 
# 360 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  int  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));
# 369 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "IGParser.fsy"
                                                   1 
                   )
# 40 "IGParser.fsy"
                 :  int ));
# 380 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "IGParser.fsy"
                                        0 
                   )
# 43 "IGParser.fsy"
                 : 'gentype_descriptor));
# 391 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_descriptor in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "IGParser.fsy"
                                              0 
                   )
# 46 "IGParser.fsy"
                 : 'gentype_signeddescriptor));
# 402 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_descriptor in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "IGParser.fsy"
                                                     0 
                   )
# 47 "IGParser.fsy"
                 : 'gentype_signeddescriptor));
# 414 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "IGParser.fsy"
                                             0 
                   )
# 50 "IGParser.fsy"
                 : 'gentype_nestedstatement));
# 425 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_signeddescriptor in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "IGParser.fsy"
                                                           0 
                   )
# 53 "IGParser.fsy"
                 : 'gentype_simpledescriptors));
# 436 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_optional_not in
            let _3 = parseState.GetInput(3) :?> 'gentype_simpledescriptors in
            let _4 = parseState.GetInput(4) :?> string in
            let _5 = parseState.GetInput(5) :?> 'gentype_and_or_xor in
            let _6 = parseState.GetInput(6) :?> string in
            let _7 = parseState.GetInput(7) :?> 'gentype_simpledescriptors in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "IGParser.fsy"
                                                                                                     0 
                   )
# 54 "IGParser.fsy"
                 : 'gentype_simpledescriptors));
# 452 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_signeddescriptor in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "IGParser.fsy"
                                               0 
                   )
# 57 "IGParser.fsy"
                 : 'gentype_complexdescriptors));
# 463 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_nestedstatement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "IGParser.fsy"
                                             0 
                   )
# 58 "IGParser.fsy"
                 : 'gentype_complexdescriptors));
# 474 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_optional_not in
            let _3 = parseState.GetInput(3) :?> 'gentype_complexdescriptors in
            let _4 = parseState.GetInput(4) :?> string in
            let _5 = parseState.GetInput(5) :?> 'gentype_and_or_xor in
            let _6 = parseState.GetInput(6) :?> string in
            let _7 = parseState.GetInput(7) :?> 'gentype_complexdescriptors in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "IGParser.fsy"
                                                                                                       0 
                   )
# 59 "IGParser.fsy"
                 : 'gentype_complexdescriptors));
# 490 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_descriptor in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "IGParser.fsy"
                                        0 
                   )
# 62 "IGParser.fsy"
                 : 'gentype_contextcategory));
# 501 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_simpledescriptors in
            let _3 = parseState.GetInput(3) :?> 'gentype_contextcategory in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "IGParser.fsy"
                                                                      0 
                   )
# 65 "IGParser.fsy"
                 : 'gentype_actconditiontype));
# 513 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_optional_not in
            let _2 = parseState.GetInput(2) :?> 'gentype_actconditiontype in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "IGParser.fsy"
                                                            0 
                   )
# 69 "IGParser.fsy"
                 : 'gentype_actconditiontypes));
# 525 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_optional_not in
            let _3 = parseState.GetInput(3) :?> 'gentype_actconditiontype in
            let _4 = parseState.GetInput(4) :?> string in
            let _5 = parseState.GetInput(5) :?> 'gentype_and_or_xor in
            let _6 = parseState.GetInput(6) :?> string in
            let _7 = parseState.GetInput(7) :?> 'gentype_optional_not in
            let _8 = parseState.GetInput(8) :?> 'gentype_actconditiontypes in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "IGParser.fsy"
                                                                                                                 0 
                   )
# 70 "IGParser.fsy"
                 : 'gentype_actconditiontypes));
# 542 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_actconditiontypes in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "IGParser.fsy"
                                                         0 
                   )
# 73 "IGParser.fsy"
                 : 'gentype_conditions));
# 553 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_nestedstatement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "IGParser.fsy"
                                                       0 
                   )
# 74 "IGParser.fsy"
                 : 'gentype_conditions));
# 564 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_actconditiontypes in
            let _4 = parseState.GetInput(4) :?> string in
            let _5 = parseState.GetInput(5) :?> 'gentype_and_or_xor in
            let _6 = parseState.GetInput(6) :?> string in
            let _8 = parseState.GetInput(8) :?> 'gentype_nestedstatement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "IGParser.fsy"
                                                                                                    0 
                   )
# 75 "IGParser.fsy"
                 : 'gentype_conditions));
# 579 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_signeddescriptor in
            let _3 = parseState.GetInput(3) :?> 'gentype_contextcategory in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "IGParser.fsy"
                                                                    0 
                   )
# 78 "IGParser.fsy"
                 : 'gentype_execconstrainttype));
# 591 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "IGParser.fsy"
                             0 
                   )
# 81 "IGParser.fsy"
                 : 'gentype_execconstrainttypes));
# 601 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_optional_not in
            let _2 = parseState.GetInput(2) :?> 'gentype_execconstrainttype in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "IGParser.fsy"
                                                             0 
                   )
# 82 "IGParser.fsy"
                 : 'gentype_execconstrainttypes));
# 613 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_optional_not in
            let _3 = parseState.GetInput(3) :?> 'gentype_execconstrainttype in
            let _4 = parseState.GetInput(4) :?> string in
            let _5 = parseState.GetInput(5) :?> 'gentype_and_or_xor in
            let _6 = parseState.GetInput(6) :?> string in
            let _7 = parseState.GetInput(7) :?> 'gentype_optional_not in
            let _8 = parseState.GetInput(8) :?> 'gentype_execconstrainttypes in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "IGParser.fsy"
                                                                                                                     0 
                   )
# 83 "IGParser.fsy"
                 : 'gentype_execconstrainttypes));
# 630 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_execconstrainttypes in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "IGParser.fsy"
                                                           0 
                   )
# 86 "IGParser.fsy"
                 : 'gentype_constraints));
# 641 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_nestedstatement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "IGParser.fsy"
                                                       0 
                   )
# 87 "IGParser.fsy"
                 : 'gentype_constraints));
# 652 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_execconstrainttypes in
            let _4 = parseState.GetInput(4) :?> string in
            let _5 = parseState.GetInput(5) :?> 'gentype_and_or_xor in
            let _6 = parseState.GetInput(6) :?> string in
            let _8 = parseState.GetInput(8) :?> 'gentype_nestedstatement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "IGParser.fsy"
                                                                                                      0 
                   )
# 88 "IGParser.fsy"
                 : 'gentype_constraints));
# 667 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_conditions in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_constraints in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "IGParser.fsy"
                                                       0 
                   )
# 91 "IGParser.fsy"
                 : 'gentype_context));
# 680 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_simpledescriptors in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 94 "IGParser.fsy"
                                                       0 
                   )
# 94 "IGParser.fsy"
                 : 'gentype_attributes));
# 691 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_nestedstatement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 95 "IGParser.fsy"
                                                     0 
                   )
# 95 "IGParser.fsy"
                 : 'gentype_attributes));
# 702 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_descriptor in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_and_or_xor in
            let _4 = parseState.GetInput(4) :?> string in
            let _6 = parseState.GetInput(6) :?> 'gentype_directobjects in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 98 "IGParser.fsy"
                                                                             0 
                   )
# 98 "IGParser.fsy"
                 : 'gentype_directobjects));
# 717 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_directobjects in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 101 "IGParser.fsy"
                                                      0 
                   )
# 101 "IGParser.fsy"
                 : 'gentype_objectdir));
# 728 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_nestedstatement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "IGParser.fsy"
                                                        0 
                   )
# 102 "IGParser.fsy"
                 : 'gentype_objectdir));
# 739 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_descriptor in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_and_or_xor in
            let _4 = parseState.GetInput(4) :?> string in
            let _6 = parseState.GetInput(6) :?> 'gentype_indirectobjects in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 105 "IGParser.fsy"
                                                                               0 
                   )
# 105 "IGParser.fsy"
                 : 'gentype_indirectobjects));
# 754 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_indirectobjects in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 108 "IGParser.fsy"
                                                        0 
                   )
# 108 "IGParser.fsy"
                 : 'gentype_objectind));
# 765 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_nestedstatement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 109 "IGParser.fsy"
                                                        0 
                   )
# 109 "IGParser.fsy"
                 : 'gentype_objectind));
# 776 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_objectdir in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 112 "IGParser.fsy"
                                       0 
                   )
# 112 "IGParser.fsy"
                 : 'gentype_object));
# 787 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_objectind in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 113 "IGParser.fsy"
                                       0 
                   )
# 113 "IGParser.fsy"
                 : 'gentype_object));
# 798 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_objectdir in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_objectind in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 114 "IGParser.fsy"
                                                    0 
                   )
# 114 "IGParser.fsy"
                 : 'gentype_object));
# 811 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_descriptor in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 117 "IGParser.fsy"
                                                0 
                   )
# 117 "IGParser.fsy"
                 : 'gentype_deontic));
# 822 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_simpledescriptors in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 120 "IGParser.fsy"
                                                       0 
                   )
# 120 "IGParser.fsy"
                 : 'gentype_aim));
# 833 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_simpledescriptors in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 123 "IGParser.fsy"
                                                       0 
                   )
# 123 "IGParser.fsy"
                 : 'gentype_entity));
# 844 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_nestedstatement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 124 "IGParser.fsy"
                                                     0 
                   )
# 124 "IGParser.fsy"
                 : 'gentype_entity));
# 855 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_descriptor in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_and_or_xor in
            let _4 = parseState.GetInput(4) :?> string in
            let _6 = parseState.GetInput(6) :?> 'gentype_directobjects in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 127 "IGParser.fsy"
                                                                             0 
                   )
# 127 "IGParser.fsy"
                 : 'gentype_propertycombos));
# 870 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_propertycombos in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "IGParser.fsy"
                                                    0 
                   )
# 130 "IGParser.fsy"
                 : 'gentype_properties));
# 881 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_nestedstatement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "IGParser.fsy"
                                                     0 
                   )
# 131 "IGParser.fsy"
                 : 'gentype_properties));
# 892 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_descriptor in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 134 "IGParser.fsy"
                                                0 
                   )
# 134 "IGParser.fsy"
                 : 'gentype_modal));
# 903 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_simpledescriptors in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "IGParser.fsy"
                                                       0 
                   )
# 137 "IGParser.fsy"
                 : 'gentype_function));
# 914 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_attributes in
            let _2 = parseState.GetInput(2) :?> 'gentype_aim in
            let _3 = parseState.GetInput(3) :?> 'gentype_context in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "IGParser.fsy"
                                                       0 
                   )
# 140 "IGParser.fsy"
                 : 'gentype_aic));
# 927 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_attributes in
            let _2 = parseState.GetInput(2) :?> 'gentype_object in
            let _3 = parseState.GetInput(3) :?> 'gentype_aim in
            let _4 = parseState.GetInput(4) :?> 'gentype_context in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 143 "IGParser.fsy"
                                                              0 
                   )
# 143 "IGParser.fsy"
                 : 'gentype_abdic));
# 941 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_attributes in
            let _2 = parseState.GetInput(2) :?> 'gentype_deontic in
            let _3 = parseState.GetInput(3) :?> 'gentype_aim in
            let _4 = parseState.GetInput(4) :?> 'gentype_context in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 144 "IGParser.fsy"
                                                               0 
                   )
# 144 "IGParser.fsy"
                 : 'gentype_abdic));
# 955 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_attributes in
            let _2 = parseState.GetInput(2) :?> 'gentype_object in
            let _3 = parseState.GetInput(3) :?> 'gentype_deontic in
            let _4 = parseState.GetInput(4) :?> 'gentype_aim in
            let _5 = parseState.GetInput(5) :?> 'gentype_context in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 145 "IGParser.fsy"
                                                                      0 
                   )
# 145 "IGParser.fsy"
                 : 'gentype_abdic));
# 970 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_function in
            let _2 = parseState.GetInput(2) :?> 'gentype_entity in
            let _3 = parseState.GetInput(3) :?> 'gentype_context in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 148 "IGParser.fsy"
                                                     0 
                   )
# 148 "IGParser.fsy"
                 : 'gentype_fec));
# 983 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_properties in
            let _2 = parseState.GetInput(2) :?> 'gentype_function in
            let _3 = parseState.GetInput(3) :?> 'gentype_entity in
            let _4 = parseState.GetInput(4) :?> 'gentype_context in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 151 "IGParser.fsy"
                                                                0 
                   )
# 151 "IGParser.fsy"
                 : 'gentype_pmfec));
# 997 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_modal in
            let _2 = parseState.GetInput(2) :?> 'gentype_function in
            let _3 = parseState.GetInput(3) :?> 'gentype_entity in
            let _4 = parseState.GetInput(4) :?> 'gentype_context in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 152 "IGParser.fsy"
                                                           0 
                   )
# 152 "IGParser.fsy"
                 : 'gentype_pmfec));
# 1011 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_properties in
            let _2 = parseState.GetInput(2) :?> 'gentype_modal in
            let _3 = parseState.GetInput(3) :?> 'gentype_function in
            let _4 = parseState.GetInput(4) :?> 'gentype_entity in
            let _5 = parseState.GetInput(5) :?> 'gentype_context in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 153 "IGParser.fsy"
                                                                      0 
                   )
# 153 "IGParser.fsy"
                 : 'gentype_pmfec));
# 1026 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_abdic in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 156 "IGParser.fsy"
                                   0 
                   )
# 156 "IGParser.fsy"
                 : 'gentype_complexstatement));
# 1037 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_pmfec in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 157 "IGParser.fsy"
                                   0 
                   )
# 157 "IGParser.fsy"
                 : 'gentype_complexstatement));
# 1048 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> string in
            let _5 = parseState.GetInput(5) :?> 'gentype_c_a_f in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 158 "IGParser.fsy"
                                                      0 
                   )
# 158 "IGParser.fsy"
                 : 'gentype_complexstatement));
# 1060 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_complexstatement in
            let _3 = parseState.GetInput(3) :?> 'gentype_optional_bracketed_c_a_f in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 159 "IGParser.fsy"
                                                                             0 
                   )
# 159 "IGParser.fsy"
                 : 'gentype_complexstatement));
# 1072 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_c_a_f in
            let _4 = parseState.GetInput(4) :?> string in
            let _5 = parseState.GetInput(5) :?> 'gentype_and_or_xor in
            let _6 = parseState.GetInput(6) :?> string in
            let _7 = parseState.GetInput(7) :?> 'gentype_c_a_f in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 160 "IGParser.fsy"
                                                                      0 
                   )
# 160 "IGParser.fsy"
                 : 'gentype_complexstatement));
# 1087 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_aic in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 163 "IGParser.fsy"
                                                   _1 
                   )
# 163 "IGParser.fsy"
                 : 'gentype_statement));
# 1098 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_fec in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 164 "IGParser.fsy"
                                                   _1 
                   )
# 164 "IGParser.fsy"
                 : 'gentype_statement));
# 1109 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_complexstatement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 165 "IGParser.fsy"
                                                   _1 
                   )
# 165 "IGParser.fsy"
                 : 'gentype_statement));
# 1120 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 168 "IGParser.fsy"
                                       0 
                   )
# 168 "IGParser.fsy"
                 : 'gentype_and_or_xor));
# 1130 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "IGParser.fsy"
                                      0 
                   )
# 169 "IGParser.fsy"
                 : 'gentype_and_or_xor));
# 1140 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "IGParser.fsy"
                                       0 
                   )
# 170 "IGParser.fsy"
                 : 'gentype_and_or_xor));
# 1150 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 173 "IGParser.fsy"
                             0 
                   )
# 173 "IGParser.fsy"
                 : 'gentype_optional_not));
# 1160 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 174 "IGParser.fsy"
                                    0 
                   )
# 174 "IGParser.fsy"
                 : 'gentype_optional_not));
# 1171 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_complexstatement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 177 "IGParser.fsy"
                                              0 
                   )
# 177 "IGParser.fsy"
                 : 'gentype_c_a_f));
# 1182 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_aic in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 178 "IGParser.fsy"
                                 0 
                   )
# 178 "IGParser.fsy"
                 : 'gentype_c_a_f));
# 1193 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_fec in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "IGParser.fsy"
                                 0 
                   )
# 179 "IGParser.fsy"
                 : 'gentype_c_a_f));
# 1204 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 182 "IGParser.fsy"
                             0 
                   )
# 182 "IGParser.fsy"
                 : 'gentype_optional_bracketed_c_a_f));
# 1214 "IGParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_c_a_f in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "IGParser.fsy"
                                         0 
                   )
# 183 "IGParser.fsy"
                 : 'gentype_optional_bracketed_c_a_f));
|]
# 1226 "IGParser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 35;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  int  =
    engine lexer lexbuf 0 :?> _
